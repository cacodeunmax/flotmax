E(graph)$weight<-rep(0,length(E(graph)$weight))
}
if (!is.null(prev)){
gprev= graph.adjacency(prev, mode = "directed", weighted = TRUE)
}
# Tracer le graphe avec les étiquettes des arêtes et un titre
edge_labels <- paste(E(graph)$weight, "/", E(graph)$capacity)
edge_labels
# Créer le graphe dirigé pondéré à partir de la matrice d'adjacence
graph <- graph.adjacency(adj_matrix, mode = "directed", weighted = TRUE)
E(graph)$capacity <- E(graph)$weight
flow_matrix
gflow= graph.adjacency(flow_matrix, mode = "directed", weighted = TRUE)
E(graph)$weight <- E(graph)$weight
E(graph)$weight
gflow= graph.adjacency(flow_matrix, mode = "directed", weighted = TRUE)
E(graph)$weight <- E(gflow)$weight
flow_matrix
flow_matrix[flow_matrix < 0] <- 0
prev[prev < 0] <- 0
# Créer le graphe dirigé pondéré à partir de la matrice d'adjacence
graph <- graph.adjacency(adj_matrix, mode = "directed", weighted = TRUE)
E(graph)$capacity <- E(graph)$weight
if (!is.null(flow_matrix)){
gflow= graph.adjacency(flow_matrix, mode = "directed", weighted = TRUE)
E(graph)$weight <- E(gflow)$weight
}else{
E(graph)$weight<-rep(0,length(E(graph)$weight))
}
flow_matrix
gflow= graph.adjacency(flow_matrix, mode = "directed", weighted = TRUE)
E(graph)$capacity <- E(graph)$weight
E(graph)$weight
plot_flow_network(ex,NULL)
res.ford=ford_fulkerson_gif(ex,1,6)$matrices
res.ford <- lapply(res.ford, function(matrix) subtract_matrix(matrix, ex))
# Appliquer la fonction à chaque élément de la liste res.ford
plot_flow_network(ex,res.ford[[1]])
plot_flow_network(ex,NULL)
res.ford=ford_fulkerson_gif(ex,1,6)$matrices
res.ford <- lapply(res.ford, function(matrix) subtract_matrix(matrix, ex))
# Appliquer la fonction à chaque élément de la liste res.ford
for (i in 1:length(res.ford)) {
plot_flow_network(ex, res.ford[[i]])
}
library(flotmax)
set.seed(32)
library(igraph)
library(flotmax)
adj_matrix <- matrix(c(
0, 10, 10, 0, 0, 0,
0, 0, 2, 4, 8, 0,
0, 0, 0, 0, 9, 0,
0, 0, 0, 0, 0, 10,
0, 0, 0, 6, 0, 10,
0, 0, 0, 0, 0, 0
), nrow = 6, byrow = TRUE)
ex=adj_matrix
extract_non_zero_values <- function(matrix,adj_matrix) {
non_zero_values=c()
for (i in 1:nrow(matrix)){
for (j in 1:ncol(matrix)){
if (adj_matrix[i,j]!=0)
non_zero_values=c(non_zero_values,matrix[i,j])
}
}
return(non_zero_values)
}
format_edge_labels <- function(graph, flow_matrix=NULL,adj_matrix) {
if (is.null(flow_matrix)){
capacities <- E(graph)$capacity
formatted_labels <- paste0("0 / ", capacities)
return(formatted_labels)
}else{
flow=extract_non_zero_values(flow_matrix,adj_matrix)
capacities <- E(graph)$capacity
formatted_labels <- paste0(flow, " / ", capacities)
return(formatted_labels)
}
}
plot_flow_network <- function(adj_matrix, flow_matrix=NULL) {
# Créer le graphe dirigé pondéré à partir de la matrice d'adjacence
graph <- graph.adjacency(adj_matrix, mode = "directed", weighted = TRUE)
# Définir les capacités comme les poids des arêtes
E(graph)$capacity <- extract_non_zero_values(adj_matrix,adj_matrix)
# Tracer le graphe avec les étiquettes des arêtes et un titre
p=plot(graph,
edge.label = format_edge_labels(graph, flow_matrix,adj_matrix),
edge.arrow.size = 0.5,
layout = layout_with_sugiyama(graph),
edge.label.cex = 0.7,
main = "Exemple de réseau de flot nul",
sub = "Source = 1, Puits = 6")
return (p)
}
plot_flow_network(adj_matrix)
plot_flow_network(ex,NULL)
ford_fulkerson_gif(ex,1,6)
res.ford=ford_fulkerson_gif(ex,1,6)
res.ford.path=res.ford$augmenting_paths
res.ford.path
res.ford.path[[i]]+1
as.char(res.ford.path[[i]]+1)
as.character(res.ford.path[[i]]+1)
paste(as.character(res.ford.path[[i]]+1))
paste(as.character(res.ford.path[[i]]+1),sep="")
res.ford.path[[i]]+1)
paste(res.ford.path[[i]]+1,collapse = "")
path=paste(res.ford.path[[i]]+1,collapse = "")
i=1
path=paste(res.ford.path[[i]]+1,collapse = "")
path=paste(res.ford.path[[i]]+1,collapse = "")
plot_flow_network(ex, res.ford.mat[[i]
)
path=paste(res.ford.path[[i]]+1,collapse = "")
plot_flow_network(ex, res.ford.mat[[i]])
res.ford.mat=ford_fulkerson_gif(ex,1,6)$matrices
plot_flow_network(ex, res.ford.mat[[i]])
path
res.ford=ford_fulkerson_gif(ex,1,6)
res.ford.mat=ford_fulkerson_gif(ex,1,6)$matrices
res.ford.path=res.ford$augmenting_paths
res.ford.mat <- lapply(res.ford, function(matrix) subtract_matrix(matrix, ex))
res.ford.mat <- lapply(res.ford.mat, function(matrix) subtract_matrix(matrix, ex))
res.ford.mat <- lapply(res.ford.mat, function(matrix) subtract_matrix(matrix, ex))
subtract_matrix <- function(mat1, mat2) {
# Vérification des dimensions
if (dim(mat1) != dim(mat2)) {
stop("Les dimensions des matrices ne correspondent pas.")
}
# Soustraction des matrices
result <- mat1 - mat2
return(result)
}
res.ford.mat <- lapply(res.ford.mat, function(matrix) subtract_matrix(matrix, ex))
subtract_matrix <- function(mat1, mat2) {
result <- mat1 - mat2
return(result)
}
res.ford.mat <- lapply(res.ford.mat, function(matrix) subtract_matrix(matrix, ex))
path=paste(res.ford.path[[i]]+1,collapse = "")
plot_flow_network(ex, res.ford.mat[[i]])
res.ford=ford_fulkerson_gif(ex,1,6)
res.ford.mat=ford_fulkerson_gif(ex,1,6)$matrices
res.ford.path=res.ford$augmenting_paths
res.ford.mat <- lapply(res.ford.mat, function(matrix) subtract_matrix(matrix, ex))
path=paste(res.ford.path[[i]]+1,collapse = "")
plot_flow_network(ex, res.ford.mat[[i]])
res.ford.mat[[i]]
subtract_matrix <- function(mat1, mat2) {
mat2[mat2 < 0] <- 0
result <- mat1 - mat2
return(result)
}
res.ford=ford_fulkerson_gif(ex,1,6)
res.ford.mat=ford_fulkerson_gif(ex,1,6)$matrices
res.ford.path=res.ford$augmenting_paths
res.ford.mat <- lapply(res.ford.mat, function(matrix) subtract_matrix(matrix, ex))
plot_flow_network(ex, res.ford.mat[[i]])
mat1=res.ford[[1]]
mat1=res.ford.mat[[1]]
ex
mat1
mat2
subtract_matrix <- function(mat1, mat2) {
mat1[mat1 < 0] <- 0
result <- mat1 - mat2
return(result)
}
res.ford=ford_fulkerson_gif(ex,1,6)
res.ford.mat=ford_fulkerson_gif(ex,1,6)$matrices
res.ford.path=res.ford$augmenting_paths
res.ford.mat <- lapply(res.ford.mat, function(matrix) subtract_matrix(matrix, ex))
path=paste(res.ford.path[[i]]+1,collapse = "")
plot_flow_network(ex, res.ford.mat[[i]])
mat1=res.ford.mat[[1]]
mat2=mat1
mat2=ex
subtract_matrix <- function(mat1, mat2) {
mat1[mat1 < 0] <- 0
result <- mat2 - mat1
return(result)
}
res.ford=ford_fulkerson_gif(ex,1,6)
res.ford.mat=ford_fulkerson_gif(ex,1,6)$matrices
res.ford.path=res.ford$augmenting_paths
res.ford.mat <- lapply(res.ford.mat, function(matrix) subtract_matrix(matrix, ex))
plot_flow_network(ex, res.ford.mat[[i]])
path=paste(res.ford.path[[i]]+1,collapse = "")
plot_flow_network(ex, res.ford.mat[[i]])
path
path=paste(res.ford.path[[i]]+1,collapse = "-")
plot_flow_network(ex, res.ford.mat[[i]])
get_edges_from_path(path)
g <- graph.ring(10,directed=TRUE)
plot(g)
ShortPth <- get.shortest.paths(g, 8, 2)    # List of path 8->2
ShortPth
E(g)$color <- "SkyBlue2"
E(g)$width <- 1
E(g, path=ShortPth)$color <- "red"
E(g, path=ShortPth[[1]])$color <- "red"
E(g, path=ShortPth$vpath[[1]])$color <- "red"
E(g, path=unlist(ShortPth$vpath))$color <- "red"
E(g, path=unlist(ShortPth[[1]]))$color <- "red"
ShortPth$vpath[[1]]  # class "igraph.vs"
# + 5/10 vertices:
# [1]  8  9 10  1  2
unlist(ShortPth$vpath)
# [1]  8  9 10  1  2
plot(g)
# Créer le graphe dirigé pondéré à partir de la matrice d'adjacence
graph <- graph.adjacency(adj_matrix, mode = "directed", weighted = TRUE)
# Définir les capacités comme les poids des arêtes
E(graph)$capacity <- extract_non_zero_values(adj_matrix,adj_matrix)
path
path=(res.ford.path[[i]]+1
)
path
plot_flow_network <- function(adj_matrix, flow_matrix=NULL,path=NULL) {
# Créer le graphe dirigé pondéré à partir de la matrice d'adjacence
graph <- graph.adjacency(adj_matrix, mode = "directed", weighted = TRUE)
# Définir les capacités comme les poids des arêtes
E(graph)$capacity <- extract_non_zero_values(adj_matrix,adj_matrix)
if(!is.null(path)){E(g, path)$color <- "red"}
# Tracer le graphe avec les étiquettes des arêtes et un titre
p=plot(graph,
edge.label = format_edge_labels(graph, flow_matrix,adj_matrix),
edge.arrow.size = 0.5,
layout = layout_with_sugiyama(graph),
edge.label.cex = 0.7,
main = "Exemple de réseau de flot nul",
sub = "Source = 1, Puits = 6")
return (p)
}
plot_flow_network(ex, res.ford.mat[[i]],path)
flow_matrix
flow_matrix=res.ford.mat[[1]]
if (is.null(flow_matrix)){
capacities <- E(graph)$capacity
formatted_labels <- paste0("0 / ", capacities)
return(formatted_labels)
}else{
flow=extract_non_zero_values(flow_matrix,adj_matrix)
capacities <- E(graph)$capacity
formatted_labels <- paste0(flow, " / ", capacities)
return(formatted_labels)
}
# Créer le graphe dirigé pondéré à partir de la matrice d'adjacence
graph <- graph.adjacency(adj_matrix, mode = "directed", weighted = TRUE)
# Définir les capacités comme les poids des arêtes
E(graph)$capacity <- extract_non_zero_values(adj_matrix,adj_matrix)
E(g)$color
# Définir les capacités comme les poids des arêtes
E(graph)$capacity <- extract_non_zero_values(adj_matrix,adj_matrix)
# Créer le graphe dirigé pondéré à partir de la matrice d'adjacence
graph <- graph.adjacency(adj_matrix, mode = "directed", weighted = TRUE)
# Définir les capacités comme les poids des arêtes
E(graph)$capacity <- extract_non_zero_values(adj_matrix,adj_matrix)
E(graph)$color
if(!is.null(path)){E(graph, path)path$color <- "red"}
if(!is.null(path)){E(graph, path)$color <- "red"}
E(graph)$color
# Tracer le graphe avec les étiquettes des arêtes et un titre
p=plot(graph,
edge.label = format_edge_labels(graph, flow_matrix,adj_matrix),
edge.arrow.size = 0.5,
layout = layout_with_sugiyama(graph),
edge.label.cex = 0.7,
main = "Exemple de réseau de flot nul",
sub = "Source = 1, Puits = 6")
p
if(!is.null(path)){
E(graph)$color=grey
E(graph, path)$color <- "red"}
if(!is.null(path)){
E(graph)$color=grey
E(graph, path)$color <- "red"}
if(!is.null(path)){
E(graph)$color="grey"
E(graph, path)$color <- "red"}
# Tracer le graphe avec les étiquettes des arêtes et un titre
p=plot(graph,
edge.label = format_edge_labels(graph, flow_matrix,adj_matrix),
edge.arrow.size = 0.5,
layout = layout_with_sugiyama(graph),
edge.label.cex = 0.7,
main = "Exemple de réseau de flot nul",
sub = "Source = 1, Puits = 6")
path
repeated_path <- c(path[1], rep(path[-c(1, length(path))], each = 2), path[length(path)])
repeated_path
repeated_path <- c(path[1], rep(path[-c(1, length(path))], each = 2), path[length(path)])
if(!is.null(path)){
E(graph)$color="grey"
E(graph, repeated_path)$color <- "red"}
# Tracer le graphe avec les étiquettes des arêtes et un titre
p=plot(graph,
edge.label = format_edge_labels(graph, flow_matrix,adj_matrix),
edge.arrow.size = 0.5,
layout = layout_with_sugiyama(graph),
edge.label.cex = 0.7,
main = "Exemple de réseau de flot nul",
sub = "Source = 1, Puits = 6")
plot_flow_network <- function(adj_matrix, flow_matrix=NULL,path=NULL) {
# Créer le graphe dirigé pondéré à partir de la matrice d'adjacence
graph <- graph.adjacency(adj_matrix, mode = "directed", weighted = TRUE)
# Définir les capacités comme les poids des arêtes
E(graph)$capacity <- extract_non_zero_values(adj_matrix,adj_matrix)
repeated_path <- c(path[1], rep(path[-c(1, length(path))], each = 2), path[length(path)])
if(!is.null(path)){
E(graph)$color="grey"
E(graph, repeated_path)$color <- "red"}
# Tracer le graphe avec les étiquettes des arêtes et un titre
p=plot(graph,
edge.label = format_edge_labels(graph, flow_matrix,adj_matrix),
edge.arrow.size = 0.5,
layout = layout_with_sugiyama(graph),
edge.label.cex = 0.7,
main = "Exemple de réseau de flot nul",
sub = "Source = 1, Puits = 6")
return (p)
}
plot_flow_network(ex,NULL)
subtract_matrix <- function(mat1, mat2) {
mat1[mat1 < 0] <- 0
result <- mat2 - mat1
return(result)
}
res.ford=ford_fulkerson_gif(ex,1,6)
res.ford.mat=ford_fulkerson_gif(ex,1,6)$matrices
res.ford.path=res.ford$augmenting_paths
res.ford.mat <- lapply(res.ford.mat, function(matrix) subtract_matrix(matrix, ex))
# Appliquer la fonction à chaque élément de la liste res.ford
for (i in 1:length(res.ford)) {
path=paste(res.ford.path[[i]]+1,collapse = "")
plot_flow_network(ex, res.ford.mat[[i]],path)
}
for (i in 1:length(res.ford)) {
path=res.ford.path[[i]]+1
plot_flow_network(ex, res.ford.mat[[i]],path)
}
path=res.ford.path[[i]]+1
path
i
i=1
path=res.ford.path[[i]]+1
plot_flow_network(ex, res.ford.mat[[i]],path)
i=2
path=res.ford.path[[i]]+1
path
plot_flow_network(ex, res.ford.mat[[i]],path)
path=res.ford.path[[i]]+1
flow_matrix=res.ford.mat[[i]]
# Créer le graphe dirigé pondéré à partir de la matrice d'adjacence
graph <- graph.adjacency(adj_matrix, mode = "directed", weighted = TRUE)
# Définir les capacités comme les poids des arêtes
E(graph)$capacity <- extract_non_zero_values(adj_matrix,adj_matrix)
repeated_path <- c(path[1], rep(path[-c(1, length(path))], each = 2), path[length(path)])
E(graph)$color="grey"
E(graph, repeated_path)$color <- "red"}
E(graph)$color="grey"
> E(graph)$color
E(graph)$color
repeated_path
path
i=1
path=res.ford.path[[i]]+1
plot_flow_network(ex, res.ford.mat[[i]],path)
i=2
path=res.ford.path[[i]]+1
path
plot_flow_network(ex, res.ford.mat[[i]])
plot_flow_network(ex, res.ford.mat[[2]])
res.ford$matrices[[2]]
ex
plot_flow_network(adj_matrix)
plot_flow_network(adj_matrix)
res.ford$matrices[[2]]
res.ford$matrices[[1]]
res.ford=ford_fulkerson_gif(ex,1,6)
res.ford.mat=ford_fulkerson_gif(ex,1,6)$matrices
res.ford.path=res.ford$augmenting_paths
for (i in 2:(length(res.ford.mat))) {
result <- subtract_matrix(res.ford.mat[[i]], res.ford.mat[[i-1]])
result_list[[i]] <- result
}
res.ford=ford_fulkerson_gif(ex,1,6)
res.ford.mat=ford_fulkerson_gif(ex,1,6)$matrices
res.ford.path=res.ford$augmenting_paths
for (i in 2:(length(res.ford.mat))) {
result <- subtract_matrix(res.ford.mat[[i]], res.ford.mat[[i-1]])
res.ford.mat[[i]] <- result
}
res.ford.mat[[1]] <- subtract_matrix(res.ford.mat[[1]], ex)
for (i in 1:length(res.ford)) {
path=res.ford.path[[i]]+1
plot_flow_network(ex, res.ford.mat[[i]],path)
}
i
path=res.ford.path[[i]]+1
path
res.ford.mat[[i]]
plot_flow_network(ex,NULL)
subtract_matrix <- function(mat1, mat2) {
mat1[mat1 < 0] <- 0
mat2[mat2 < 0] <- 0
result <- mat2 - mat1
return(result)
}
res.ford=ford_fulkerson_gif(ex,1,6)
res.ford.mat=ford_fulkerson_gif(ex,1,6)$matrices
res.ford.path=res.ford$augmenting_paths
for (i in 2:(length(res.ford.mat))) {
result <- subtract_matrix(res.ford.mat[[i]], res.ford.mat[[i-1]])
res.ford.mat[[i]] <- result
}
res.ford.mat[[1]] <- subtract_matrix(res.ford.mat[[1]], ex)
for (i in 1:length(res.ford)) {
path=res.ford.path[[i]]+1
plot_flow_network(ex, res.ford.mat[[i]],path)
}
i
res.ford.mat[[i]]
i=1
path=res.ford.path[[i]]+1
plot_flow_network(ex, res.ford.mat[[i]],path)
i=2
path=res.ford.path[[i]]+1
path
res.ford.mat[[i]]
i=1
plot_flow_network(ex, res.ford.mat[[i]],path)
plot_flow_network(ex, res.ford.mat[[i]],path)
path=res.ford.path[[i]]+1
plot_flow_network(ex, res.ford.mat[[i]],path)
res.ford.mat[[i]]
res.ford.mat[[2]]
i
length(res.ford.mat)
res.ford=ford_fulkerson_gif(ex,1,6)
res.ford.mat=ford_fulkerson_gif(ex,1,6)$matrices
res.ford.path=res.ford$augmenting_paths
res.ford.mat
for (i in 2:(length(res.ford.mat))) {
result <- subtract_matrix(res.ford.mat[[i]], res.ford.mat[[i-1]])
res.ford.mat[[i]] <- result
}
res.ford.mat[[1]] <- subtract_matrix(res.ford.mat[[1]], ex)
res.ford.mat
res.ford.mat
i=1
res.ford=ford_fulkerson_gif(ex,1,6)
res.ford.mat=ford_fulkerson_gif(ex,1,6)$matrices
res.ford.path=res.ford$augmenting_paths
for (i in 2:(length(res.ford.mat))) {
result <- subtract_matrix(res.ford.mat[[i]], res.ford.mat[[i-1]])
res.ford.mat[[i]] <- result
}
res.ford.mat[[1]] <- subtract_matrix(res.ford.mat[[1]], ex)
path=res.ford.path[[i]]+1
plot_flow_network(ex, res.ford.mat[[i]],path)
ford_fulkerson_gif(ex,1,6)$matrices[[1]]
res.ford=ford_fulkerson_gif(ex,1,6)
res.ford.mat=ford_fulkerson_gif(ex,1,6)$matrices
res.ford.path=res.ford$augmenting_paths
for (i in 2:(length(res.ford.mat))) {
result <- subtract_matrix(res.ford.mat[[i]], res.ford.mat[[i-1]])
res.ford.mat[[i]] <- result
}
res.ford.mat[[1]] <- subtract_matrix(res.ford.mat[[1]], ex)
i=1
path=res.ford.path[[i]]+1
plot_flow_network(ex, res.ford.mat[[i]],path)
ford_fulkerson_gif(ex,1,6)$matrices[[1]]
ford_fulkerson_gif(ex,1,6)$matrices[[2]]
ford_fulkerson_gif(ex,1,6)$path[[2]]
ford_fulkerson_gif(ex,1,6)$augmenting_path[[2]]
ford_fulkerson_gif(ex,1,6)$augmenting_path[[2]]+1
ford_fulkerson_gif(ex,1,6)$matrices[[2]]
ex-ford_fulkerson_gif(ex,1,6)$matrices[[2]]
res.ford=ford_fulkerson_gif(ex,1,6)
res.ford=ford_fulkerson_gif(ex,1,6)
res.ford.mat=ford_fulkerson_gif(ex,1,6)$matrices
subtract_matrix(res.ford.mat[[1]],ex)+subtract_matrix(res.ford.mat[[2]],ex)
w=subtract_matrix(res.ford.mat[[1]],ex)+subtract_matrix(res.ford.mat[[2]],ex)
w[w<0]=0
w
i=1
path=res.ford.path[[i]]+1
plot_flow_network(ex, res.ford.mat[[i]],path)
w
res.ford.path[[2]]
res.ford=ford_fulkerson_gif(ex,1,6)
res.ford.mat=ford_fulkerson_gif(ex,1,6)$matrices
res.ford.path=res.ford$augmenting_paths
for (i in 2:(length(res.ford.mat))) {
result <- subtract_matrix(res.ford.mat[[i]], res.ford.mat[[i-1]])
res.ford.mat[[i]] <- result
}
res.ford.mat[[1]] <- subtract_matrix(res.ford.mat[[1]], ex)
for (i in 1:length(res.ford)) {
path=res.ford.path[[i]]+1
plot_flow_network(ex, res.ford.mat[[i]],path)
}
i=1
path=res.ford.path[[i]]+1
plot_flow_network(ex, res.ford.mat[[i]],path)
res.ford.path=res.ford$augmenting_paths
res.ford.path[[2]]
w
res.ford.path[[2]]+1
